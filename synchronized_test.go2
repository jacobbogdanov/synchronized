// TODO: make this an external test once I can figure out how to import other packages using go2go.
package synchronized

import (
	"sync"
	"testing"
)

const (
	initString = "hello"
	initInt    = 42
)

func TestSynchronizedRead(t *testing.T) {
	t.Parallel()

	s := NewSynchronized[int](initInt)

	if value := s.Value(); value != initInt {
		t.Errorf("expected value == %v. got: %v", initInt, value)
	}
}

func TestSynchronizedSet(t *testing.T) {
	t.Parallel()

	s := NewSynchronized[string](initString)

	s.Set("world")

	modifyFunc, checkCalled := makeCheckFunc[string](t, "world")
	s.WithLock(modifyFunc)
	checkCalled()
}

func TestSynchronizedDisallowTakingReferencesInWithLock(t *testing.T) {
	t.Parallel()

	s := NewSynchronized[string](initString)

	var bad *string = nil

	s.WithLock(func(value *string) {
		bad = value
	})

	if bad == nil {
		t.Fatal("bad pointer never set")
	}

	*bad = "world"

	if value := s.Value(); value != initString {
		t.Fatalf("expected value == %v. got: %v", initString, value)
	}
}

func TestSynchronizedCustomLocker(t *testing.T) {
	t.Parallel()

	mu := &CustomRWMutex{}
	s := NewSynchronizedWithLock[int](initInt, mu)

	mu.checkCount(t, Stats{unlock: 0, lock: 0})

	_ = s.Value()
	mu.checkCount(t, Stats{unlock: 1, lock: 1})

	mu.resetCount()
	s.WithLock(func(*int) {
		mu.checkCount(t, Stats{unlock: 0, lock: 1})
	})

	mu.checkCount(t, Stats{unlock: 1, lock: 1})
}

func TestSynchronizedPanicInWithLock(t *testing.T) {
	t.Parallel()

	mu := &CustomRWMutex{}
	s := NewSynchronizedWithLock[string](initString, mu)

	didPanic := false
	func() {
		defer func() {
			didPanic = true
			recover()
		}()

		mu.checkCount(t, Stats{unlock: 0, lock: 0})
		s.WithLock(func(value *string) {
			mu.checkCount(t, Stats{unlock: 0, lock: 1})
			*value = "world"
			panic("ahh!")
		})

		t.Fatal("shouldn't get to the end of this function.")
	}()

	if !didPanic {
		t.Fatal("expected panic/recover that never happened")
	}

	mu.checkCount(t, Stats{unlock: 1, lock: 1})

	if value := s.Value(); value != "world" {
		t.Errorf("expected value to be updated before panic, expected value == 'world'. got %v", value)
	}
}

type Stats struct {
	lock, unlock, rlock, runlock int
}

type CustomRWMutex struct {
	actual sync.RWMutex
	stats  Stats
}

func (cm *CustomRWMutex) Lock() {
	cm.stats.lock++
	cm.actual.Lock()
}

func (cm *CustomRWMutex) Unlock() {
	cm.stats.unlock++
	cm.actual.Unlock()
}

func (cm *CustomRWMutex) RLock() {
	cm.stats.rlock++
	cm.actual.RLock()
}

func (cm *CustomRWMutex) RUnlock() {
	cm.stats.runlock++
	cm.actual.RUnlock()
}

func (cm *CustomRWMutex) checkCount(t *testing.T, stats Stats) {
	t.Helper()

	if stats.lock != cm.stats.lock {
		t.Fatalf("expected lock count to be %d. got: %d", stats.lock, cm.stats.lock)
	}
	if stats.unlock != cm.stats.unlock {
		t.Fatalf("expected unlock count to be %d. got: %d", stats.unlock, cm.stats.unlock)
	}
	if stats.rlock != cm.stats.rlock {
		t.Fatalf("expected rlock count to be %d. got: %d", stats.rlock, cm.stats.rlock)
	}
	if stats.runlock != cm.stats.runlock {
		t.Fatalf("expected runlock count to be %d. got: %d", stats.runlock, cm.stats.runlock)
	}
}

func (cm *CustomRWMutex) resetCount() { cm.stats = Stats{} }

func makeCheckFunc[Value comparable](t *testing.T, expected Value) (func(*Value), func()) {
	t.Helper()

	called := false
	checkCalled := func() {
		if !called {
			t.Errorf("function never called")
		}
	}

	modifyFunc := func(value *Value) {
		if value == nil {
			t.Fatal("value is nil")
		}
		if *value != expected {
			t.Errorf("expected value == %v. got: %v", expected, *value)
		}

		called = true
	}
	return modifyFunc, checkCalled
}
