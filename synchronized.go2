// Package synchronized introduces a simple abstraction for mutex- based concurrency. It replaces
// convoluted, unwieldy, and just plain wrong code with simple constructs that are easy to get right
// and difficult to get wrong.
package synchronized

import (
	"sync"
)

// Locker is syntactic sugar for sync.Locker, which is an interface with two methods, Lock() and
// Unlock().
type Locker = sync.Locker

// RWLocker is an interface for a reader/writer mutual exclusion lock. It provides the same
// interface as Locker, but adds two new methods, RLock() and RUnlock() for acquiring read-only
// access to the lock.
type RWLocker interface {
	Locker
	RLock()
	RUnlock()
}

// Synchronized provides a simple abstraction for mutex- based conncurrency.
type Synchronized[T any] struct {
	mutex Locker
	data  T
}

// NewSynchronized creates a new Synchronized and initializes it with a user-provided value and a
// *sync.Mutex. To specify a custom Locker use NewSynchronizedWithLock.
func NewSynchronized[T any](data T) *Synchronized[T] {
	lock := &sync.Mutex{}
	return NewSynchronizedWithLock[T](data, lock)
}

// NewSynchronizedWithLock creates a new Synchronized and initializes it with a user-provided value
// and Locker.
func NewSynchronizedWithLock[T any](data T, lock Locker) *Synchronized[T] {
	return &Synchronized[T]{mutex: lock, data: data}
}

// WithLock acquires an exclusive lock on the object, then provides access to read or write the stored
// value. The passed in function takes a pointer to the data, which if dereferenced, can be used to
// assign a new value to the stored data.
func (s *Synchronized[T]) WithLock(function func(data *T)) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	// Rather than giving the function a pointer to the actual storage, copy the data out and then
	// back in once the function is done. This prevents callers from storing an unguarded pointer
	// to the actual data.
	data := s.data
	defer func() { s.data = data }()

	function(&data)
}

// Set acquires an exclusive lock, the replaces the stored data.
func (s *Synchronized[T]) Set(value T) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	s.data = value
}

// Value acquires a exclusive lock, then returns a copy of the stored data.
func (s *Synchronized[T]) Value() T {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	return s.data
}

// RWSynchronized provides a simple abstraction for mutex- based conncurrency, with differentiation
// for read and write.
type RWSynchronized[T any] struct {
	mutex RWLocker
	data  T
}

// NewRWSynchronized creates a new RWSynchronized and initializes it with a user-provided value and
// a *sync.RWMutex. To specify a custom RWLocker use NewRWSynchronizedWithLock.
func NewRWSynchronized[T any](data T) *RWSynchronized[T] {
	lock := &sync.RWMutex{}
	return NewRWSynchronizedWithLock[T](data, lock)
}

// NewRWSynchronizedWithLock creates a new RWSynchronized and initializes it with a user-provided
// value and RWLocker.
func NewRWSynchronizedWithLock[T any](data T, lock RWLocker) *RWSynchronized[T] {
	return &RWSynchronized[T]{mutex: lock, data: data}
}

// WithLock acquires an exclusive lock on the object, then provides access to read or write the stored
// value. The passed in function takes a pointer to the data, which if dereferenced, can be used to
// assign a new value to the stored data.
func (s *RWSynchronized[T]) WithLock(function func(data *T)) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	// Rather than giving the function a pointer to the actual storage, copy the data out and then
	// back in once the function is done. This prevents callers from storing an unguarded pointer
	// to the actual data.
	data := s.data
	defer func() { s.data = data }()

	function(&data)
}

// WithRLock acquires a read lock on the object, then provides access to read the stored value.
func (s *RWSynchronized[T]) WithRLock(function func(data T)) {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	// Rather than giving the function a pointer to the actual storage, copy the data out and then
	// back in once the function is done. This prevents callers from storing an unguarded pointer
	// to the actual data.
	data := s.data
	defer func() { s.data = data }()

	function(&data)
}

// Set acquires an exclusive lock, then replaces the stored data.
func (s *RWSynchronized[T]) Set(value T) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	s.data = value
}

// Value acquires a read lock, then returns a copy of the stored data.
func (s *RWSynchronized[T]) Value() T {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	return s.data
}
